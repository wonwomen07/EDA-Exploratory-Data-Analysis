# -*- coding: utf-8 -*-
"""EDA-THINKSTATS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K22AY6KJpRJSyKDEJjqEqlE6vaRpUoxd
"""

from os.path import basename, exists


def download(url):
    filename = basename(url)
    if not exists(filename):
        from urllib.request import urlretrieve

        local, _ = urlretrieve(url, filename)
        print("Downloaded " + local)


download("https://github.com/AllenDowney/ThinkStats2/raw/master/code/thinkstats2.py")
download("https://github.com/AllenDowney/ThinkStats2/raw/master/code/thinkplot.py")

download("https://github.com/AllenDowney/ThinkStats2/raw/master/code/nsfg.py")

download("https://github.com/AllenDowney/ThinkStats2/raw/master/code/2002FemPreg.dct")
download(
    "https://github.com/AllenDowney/ThinkStats2/raw/master/code/2002FemPreg.dat.gz"
)

import nsfg
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

preg = nsfg.ReadFemPreg()
preg.head(5)

preg.dtypes

preg['agepreg'].count()

def col(data):
  columns = data.columns
  length = len(columns)
  for col in range(length):
       print(columns[col])
       
column = (col(preg))
column

preg.columns.value_counts() ## 244 columns are here

preg.info()

preg.outcome.value_counts().sort_index()

preg.birthwgt_lb.value_counts().sort_index()

"""average weight of new born babies is from 3.5 to 11 pounds , the remaining are outliers(not a usual thing)"""

preg.loc[preg.birthwgt_lb >11   , 'birthwgt_lb'] = np.nan
preg.birthwgt_lb.value_counts()

preg.loc[preg.birthwgt_lb < 3.5 , "birthwgt_lb"] = np.nan
preg.birthwgt_lb.value_counts()

"""DISTRIBUTION:
             to describe a variable-to report the values - how many times it occurs - this is called the distribution od variable - it is done by histogram - shows frequency of each value in dataset (to understand the variables or attributes in dataframe)

BIRTH WEIGHT IN LB  (DISTRIBUTION)
"""

import plotly.express as px
fig = px.histogram(preg.birthwgt_lb  )
fig.show()

"""here the mean value is 7 ponds(average one)"""

print("the correct highest weight is:" , preg.birthwgt_lb.mean() + 3*preg.birthwgt_lb.std())

print("the acceptable lowest weight of new born is:" , preg.birthwgt_lb.mean() - 3*preg.birthwgt_lb.std())

"""detecting the outliers and trimming it."""

preg[(preg.birthwgt_lb > 11.06646245559615 ) | (preg.birthwgt_lb <  2.597782370471661)]

new_preg = preg[(preg['birthwgt_lb'] < 11.06646245559615) & (preg['birthwgt_lb'] >  2.597782370471661 ) ]
new_preg

preg.birthwgt_lb.describe()

new_preg.birthwgt_lb.describe()

"""from the above visualization we can conclude that a new borns weight varies from 1 to 11 pounds based on it's deliver period . here newborn with 6,7,8 pounds are high in numbers . Here mode is 7 . it is like a normal distribution.

BIRTH WEIGHT IN OZ.
"""

fig2 = px.histogram(preg.birthwgt_oz)
fig2.show()

"""here the mode is 0"""

fig3= px.histogram(preg.agepreg)
fig3.show()

"""teenage pregnency is high in america.The pregnency rate is high from age 17 to 21. here mode is 20 . most of the pregnencies are at 20's and 30's.

PREGNENCY PERIOD (LENGTH)
"""

fig4 =px.histogram(preg.prglngth)
fig4.show()

"""here in duration of pregnency mode is 39 weeks.

after the visualization segment , next we need to check whetehr there is outlier which is extreme value or (may be reports of rare events)

CONSIDER PREGNENCY DURATION there are many outliers in (preglnth) from 0 t0 22 are errors . values above 30 weeks are acceptable . we need to consider the pre-matured baby too.
"""

live = preg[preg.outcome ==1 ] 
## live births

new_preg.birthord.value_counts()

first = live[live.birthord == 1 ]
seconds = live[live.birthord != 1]

first_baby = px.histogram(first.prglngth )
first_baby

second_baby = px.histogram(seconds.prglngth)
second_baby

preg.prglngth.mean()

live.prglngth.mean()

preg.prglngth.var()

preg.prglngth.std()

from scipy.stats import norm
y_pdf = norm.pdf(new_preg)
_ = plt.plot(new_preg, y_pdf, label='pdf', color='r')

x = preg['agepreg']
 y = preg['birthwgt_lb']
 n= x.count()  ## sample size
 n

sum_of_x = x.sum()
sum_of_x

sum_of_y = y.sum()
sum_of_y

x_squared = x**2
sum_of_x_squared = x_squared.sum()
sum_of_x_squared

multiple_xy = x*y
sum_xy = multiple_xy.sum()
sum_xy

"""least_square_fit"""

def least_square( x , y):
    x = preg['agepreg']
    y = preg['birthwgt_lb']
    n= x.count()  ## sample size

    sum_of_x = x.sum()

    sum_of_y = y.sum()

    x_squared = x**2
    sum_of_x_squared = x_squared.sum()

    multiple_xy = x*y
    sum_xy = multiple_xy.sum()

    meanx = x.mean()

    meany = y.mean()


    numerator = n*sum_xy - sum_of_x*sum_of_y
    denominator = n*sum_of_x_squared - sum_of_x**2
    slope = numerator/denominator

    inter = meany - slope*meanx

    return slope , inter

x = preg['agepreg']
y = preg['birthwgt_lb']

least_square(x , y)

preg['agepreg'].head(5)

preg['birthwgt_lb'].head()

def y_value(slope , inter , x , y ):
  slope , inter = least_square(x , y)
  for i in range(len(x)):
      y = inter + slope*x[i]
      return y

y_value(0.04556360387451536 ,5.707241271497856 , x , y )

"""7.218130375976785 which is close to 8.0 from preg['birthwgt_lb'] 's first value . Hence least square has been executed successfully"""

import statsmodels.formula.api as sms

data = preg
model = sms.ols('totalwgt_lb ~ agepreg' , data)
result = model.fit()

result.predict(data).head(5)

intercept =result.params[0]
slope = result.params[1]

intercept

slope

for i in range(len(preg['agepreg'])):
    x = preg['agepreg']
    y = intercept + slope*x[i]
    print(y)

print(result.summary())

live_births = preg[preg['outcome']==1]
print("baby lives:" , len(live_births))

first_baby = live_births[live_births['birthord'] ==1]
other_baby = live_births[live_births['birthord'] !=1]
diff_weight = first_baby.totalwgt_lb.mean() - other_baby.totalwgt_lb.mean()
diff_weight

first_baby.totalwgt_lb.mean()

other_baby.totalwgt_lb.mean()

def fitline(x , slope , intercept):
     fit_x = np.sort(x)
     fit_y = intercept + slope * fit_x
     return fit_x , fit_y

inter , slope = least_square(live_births['agepreg'] ,live_births['totalwgt_lb'])
fit_x  , fit_y = fitline(live_births['agepreg'] , inter , slope)
plt.scatter(fit_x , fit_y)

